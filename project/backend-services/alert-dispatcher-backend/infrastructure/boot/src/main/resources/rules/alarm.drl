package pt.sensae.services.alert.dispatcher.backend.rules

import pt.sharespot.iot.core.sensor.model.data.SensorDataDetailsDTO;
import pt.sharespot.iot.core.sensor.model.SensorDataDTO;
import pt.sharespot.iot.core.sensor.model.device.records.DeviceRecordEntryDTO;
import pt.sharespot.iot.core.sensor.model.properties.PropertyName;
import pt.sharespot.iot.core.alert.model.AlertBuilder;
import java.util.List;
import java.util.UUID
import pt.sharespot.iot.core.alert.model.AlertLevelDTO
import pt.sharespot.iot.core.alert.model.CorrelationDataBuilder;

global pt.sensae.services.alert.dispatcher.backend.application.AlertHandlerService dispatcher;

dialect "mvel"

declare ValveDevice
    @role( event )
    deviceId : UUID
end

declare ValveDeviceData
    @role( event )
    deviceId : UUID
    dataId : UUID
    on : Boolean
end

declare StoveSensor
    @role( event )
    deviceId : UUID
end

declare StoveSensorData
    @role( event )
    deviceId : UUID
    dataId : UUID
    temperature : Double
    humidity : Double
end

rule "Project #003 - Stove/Valve Alarm - Guard Scenario"
    when        
        SensorDataDTO(
            !getSensorData().hasProperty(PropertyName.AIR_HUMIDITY_RELATIVE_PERCENTAGE)
            || !getSensorData().hasProperty(PropertyName.TEMPERATURE)
        ) or
        SensorDataDTO(
            !getSensorData().hasProperty(PropertyName.TRIGGER)
        )
    then
end

//to ensure that only one alarm per valve is sent
rule "Create new valve device that belongs to Project #003"
    when
        $data : SensorDataDTO(
            getSensorData().hasProperty(PropertyName.TRIGGER)
        )
        exists DeviceRecordEntryDTO(label == "Project" && content == "#003") from $data.device.records
        not(ValveDevice(deviceId == $data.device.id))
    then
        ValveDevice valve = new ValveDevice();
        valve.setDeviceId($data.device.id);
        insert(valve)
        dispatcher.publish(AlertBuilder.create()
                          .setCategory("device")
                          .setDescription("New Valve")
                          .setLevel(AlertLevelDTO.INFORMATION)
                          .setContext(CorrelationDataBuilder.create()
                              .setDeviceIds($data.device.id)
                              .setDataIds($data.dataId)
                              .setOther("Project #003")
                              .build())
                          .build());
end

//if the data is from a valve device and is not duplicated add it
rule "Collect valve device data that belongs to Project #003"
    when
        $data : SensorDataDTO(
            getSensorData().hasProperty(PropertyName.TRIGGER)
        )
        exists DeviceRecordEntryDTO(label == "Project" && content == "#003") from $data.device.records
        not(ValveDeviceData(dataId == $data.dataId))
    then
        ValveDeviceData reading = new ValveDeviceData();
        reading.setDeviceId($data.device.id);
        reading.setDataId($data.dataId);
        reading.setOn($data.getSensorData().trigger.value);
        insert(reading)
        dispatcher.publish(AlertBuilder.create()
                          .setCategory("valveData")
                          .setDescription("DataId: " + $data.dataId + " - On: " + $data.getSensorData().trigger.value)
                          .setLevel(AlertLevelDTO.INFORMATION)
                          .setContext(CorrelationDataBuilder.create()
                              .setDeviceIds($data.device.id)
                              .setDataIds($data.dataId)
                              .setOther("Project #003")
                              .build())
                          .build());
end

//to ensure that only one alarm per device is sent
rule "Create new stove sensor devices that belongs to Project #003"
    when
        data : SensorDataDTO(
            getSensorData().hasProperty(PropertyName.AIR_HUMIDITY_RELATIVE_PERCENTAGE),
            getSensorData().hasProperty(PropertyName.TEMPERATURE)
        )
        exists DeviceRecordEntryDTO(label == "Project" && content == "#003") from data.device.records
        not(StoveSensor(deviceId == data.device.id))
    then 
        StoveSensor sensor = new StoveSensor();
        sensor.setDeviceId(data.device.id);
        insert(sensor)
end

//if the data is from a stove sensor and is not duplicated add it
rule "Collect stove sensor data that belongs to Project #003"
    when
        data : SensorDataDTO(
            getSensorData().hasProperty(PropertyName.AIR_HUMIDITY_RELATIVE_PERCENTAGE),
            getSensorData().hasProperty(PropertyName.TEMPERATURE)
        )
        exists DeviceRecordEntryDTO(label == "Project" && content == "#003") from data.device.records
        not(StoveSensorData(dataId == data.dataId))
    then
        StoveSensorData reading = new StoveSensorData();
        reading.setDeviceId(data.device.id);
        reading.setDataId(data.dataId);
        reading.setTemperature(data.getSensorData().temperature.celsius);
        reading.setHumidity(data.getSensorData().airHumidity.relativePercentage);
        insert(reading)
end

//if we can find any stove sensor with
// - more that one reading,
// - an humidity average of 20,
// - a max temperature of 40,
// - an average tempearture of 30
// then fire an allarm 
rule "Dispatch Stove Alarm - Scenario - Project #003"
    when
        $s : StoveSensor()
        accumulate( StoveSensorData($temp : temperature, $humi : humidity, deviceId == $s.deviceId, $dataId : dataId);
                        $count: count($temp),
                        $maxTemp : max( $temp ),
                        $avgTemp : average( $temp ),
                        $avgHumi : average( $humi );
                        $count != 1 && ($avgHumi < 20 && $maxTemp > 40 && $avgTemp > 30))
    then 
        dispatcher.publish(AlertBuilder.create()
                            .setCategory("drySoilDetected")
                            .setDescription("Project #003 - Stove environment has low humidity and should be watered")
                            .setLevel(AlertLevelDTO.WARNING)
                            .setContext(CorrelationDataBuilder.create()
                                .setDeviceIds($s.deviceId)
                                .setOther("Project #003")
                                .build())
                            .build());
end

rule "Dispatch Valve Alarm - Senario - Project #003"
    when
        $v : ValveDevice()
        $data: ValveDeviceData(deviceId == $v.deviceId, on == true)
        not(
            ValveDeviceData(
                this != $data, 
                on == false,
                this after[0s,10m] $data
            )
        )
    then
        dispatcher.publish(AlertBuilder.create()
                            .setCategory("closeValve")
                            .setDescription("Project #003 - Valve has been open for more than 10 minutes, needs to be closed")
                            .setLevel(AlertLevelDTO.WARNING)
                            .setContext(CorrelationDataBuilder.create()
                                .setDeviceIds($v.deviceId)
                                .setDataIds($data.dataId)
                                .setOther("Project #003")
                                .build())
                            .build());
end
