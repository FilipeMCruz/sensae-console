type DeviceRecords {
    device : Device
    entries : [RecordEntry]
    subDevices : [SubDevice]
    commands : [DeviceCommand]
}

type RecordEntry {
    label : String
    content : String
    type : RecordType
}

type Device {
    id : String
    name : String
    downlink : String
}

type DeviceCommand {
    id : String
    name : String
    ref : Int
    port : Int
    payload : String
}

type SubDevice {
    id : String
    ref : Int
}

type DeviceId {
    id : String
}

enum RecordType {
    BASIC
    SENSOR_DATA
}

input DeviceInput {
    id : String
    name : String
    downlink : String
}

input DeviceRecordsInput {
    device : DeviceInput
    entries : [RecordEntryInput]
    subDevices : [SubDeviceInput]
    commands: [DeviceCommandInput]
}

input RecordEntryInput {
    label : String
    content : String
    type : RecordType
}

input SubDeviceInput {
    id : String
    ref : Int
}

input DeviceCommandInput {
    id : String
    name : String
    ref : Int
    port : Int
    payload : String
}
