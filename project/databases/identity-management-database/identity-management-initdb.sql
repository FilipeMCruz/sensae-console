SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

DROP DATABASE IF EXISTS identity;

CREATE DATABASE identity WITH TEMPLATE = template0 ENCODING = 'UTF8' LOCALE = 'en_US.utf8';


ALTER DATABASE identity OWNER TO "user";

\connect identity

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

ALTER SCHEMA public OWNER TO "user";

COMMENT ON SCHEMA public IS 'standard public schema';
SET default_tablespace = '';

SET default_table_access_method = heap;

create table if not exists public.device
(
    persistence_id bigint generated by default as identity
        primary key,
    oid            varchar(255)
        constraint uk_8nx9kguudoak57q55dki215mf
            unique
);

alter table public.device
    owner to "user";

create table if not exists public.device_permission
(
    persistence_id        bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    domain_oid            varchar(255),
    device_persistence_id bigint
        constraint fki2c6qmuo17j0t9mivs20c5yin
            references public.device
);

alter table public.device_permission
    owner to "user";

create table if not exists public.domain
(
    persistence_id bigint generated by default as identity
        primary key,
    name           varchar(255),
    oid            varchar(255)
        constraint uk_tlgokcy26phhe2qvkmft2kr2s
            unique,
    path           text[]
);

alter table public.domain
    owner to "user";

create table if not exists public.domain_permission
(
    persistence_id        bigint generated by default as identity
        primary key,
    type                  integer not null,
    domain_persistence_id bigint
        constraint fk5px4xbjq5p2jskd7l3sfrtrwb
            references public.domain
);

alter table public.domain_permission
    owner to "user";

create table if not exists public.tenant
(
    persistence_id bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    domains        text[],
    email          varchar(255)
        constraint uk_1wuu4ilo8ya2tm94iswtp6ev1
            unique,
    name           varchar(255),
    oid            varchar(255)
        constraint uk_192jkmibgcj10gdjx6u51kw3s
            unique,
    phone_number   varchar(255)
);

alter table public.tenant
    owner to "user";

